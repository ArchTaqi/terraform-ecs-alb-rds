name: Terraform

on: [pull_request, push]

jobs:
  Terraform:
    runs-on: ubuntu-latest

    steps:
      - uses: hashicorp/setup-terraform@v1

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Terraform version
        run: terraform -v
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init
        id: init
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
      - name: Update Pull Request
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            #### ðŸ“‹ Terraform Format \`${{ steps.fmt.outcome }}\`
            #### ðŸš€ Terraform Initialisation \`${{ steps.init.outcome }}\`
            #### âœ… Terraform Validation \`${{ steps.validate.outcome }}\`
            #### ðŸ“– Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\` 
            ${process.env.PLAN} 
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Report Status to Slack
        uses: rtCamp/action-slack-notify@v2
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          status: ${{ Terraform.status }}
          notify_when: 'failure'
        env:
          SLACK_CHANNEL: aws-alerts
          SLACK_COLOR: ${{ Terraform.status }}
          SLACK_ICON: https://github.com/rtCamp.png?size=48
          SLACK_MESSAGE: 'Post Content :rocket:'
          SLACK_TITLE: aws-staging deploy failure
          SLACK_USERNAME: githubBot
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}